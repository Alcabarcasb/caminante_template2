{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nvar _this = this;\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Styles } from '@expo/config-plugins/build/android';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoginScreen = function LoginScreen(_ref) {\n  _objectDestructuringEmpty(_ref);\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    username = _useState2[0],\n    setUsername = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var navigation = useNavigation();\n  var handleLogin = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield fetch('http://127.0.0.1:5000/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: username,\n            password: password\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Invalid credentials');\n        }\n        var data = yield response.json();\n        var idToken = data.id_token;\n        var roleResponse = yield fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyDm7RVoLr71IqKiKP4_Z06XGU_SxBNMQSo', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            idToken: idToken\n          })\n        });\n        if (!roleResponse.ok) {\n          throw new Error('Failed to obtain role');\n        }\n        var roleData = yield roleResponse.json();\n        var role = roleData.users[0].customClaims.role;\n        if (role === 'admin') {\n          Alert.alert('Inicio de sesi칩n exitoso como admin');\n          navigation.navigate('Home');\n        } else {\n          throw new Error('Invalid role');\n        }\n      } catch (error) {\n        Alert.alert('Error', error.message);\n      }\n    });\n    return function handleLogin() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(TextInput, {\n      placeholder: \"Usuario\",\n      onChangeText: setUsername\n    }), _jsx(TextInput, {\n      placeholder: \"Contrase\\xF1a\",\n      secureTextEntry: true,\n      onChangeText: setPassword\n    }), _jsx(Button, {\n      title: \"Iniciar sesi\\xF3n\",\n      onPress: function onPress() {\n        return _this.props.navigation.navigate('App');\n      }\n    })]\n  });\n};\nexport default LoginScreen;","map":{"version":3,"names":["useNavigation","React","useState","View","TextInput","Button","Alert","Styles","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","_objectDestructuringEmpty","_useState","_useState2","_slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","navigation","handleLogin","_ref2","_asyncToGenerator","response","fetch","method","headers","body","JSON","stringify","email","ok","Error","data","json","idToken","id_token","roleResponse","roleData","role","users","customClaims","alert","navigate","error","message","apply","arguments","children","placeholder","onChangeText","secureTextEntry","title","onPress","_this","props"],"sources":["C:/Users/LENOVO/source/repos/react-native-walkthrough/react-native-walkthrough-master/src/screens/WalkthroughScreen/Login.js"],"sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport React, { useState } from 'react';\r\nimport { View, TextInput, Button, Alert } from 'react-native';\r\nimport { Styles } from '@expo/config-plugins/build/android';\r\n//import Homescreen from './HomeScreen';\r\n\r\nconst LoginScreen = ({}) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const navigation = useNavigation();\r\n\r\n  const handleLogin = async () => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: username,\r\n          password: password,\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      const idToken = data.id_token;\r\n  \r\n      // Obtain role from ID token\r\n      const roleResponse = await fetch('https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=AIzaSyDm7RVoLr71IqKiKP4_Z06XGU_SxBNMQSo', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          idToken: idToken,\r\n        }),\r\n      });\r\n  \r\n      if (!roleResponse.ok) {\r\n        throw new Error('Failed to obtain role');\r\n      }\r\n  \r\n      const roleData = await roleResponse.json();\r\n      const role = roleData.users[0].customClaims.role;\r\n  \r\n      // If role is 'client' navigate to 'Home', otherwise show an error\r\n      if (role === 'admin') {\r\n        Alert.alert('Inicio de sesi칩n exitoso como admin');\r\n        navigation.navigate('Home');\r\n      } else {\r\n        throw new Error('Invalid role');\r\n      }\r\n    } catch (error) {\r\n      Alert.alert('Error', error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <View>\r\n      <TextInput placeholder=\"Usuario\" onChangeText={setUsername} />\r\n      <TextInput placeholder=\"Contrase침a\" secureTextEntry onChangeText={setPassword} />\r\n      <Button title=\"Iniciar sesi칩n\" onPress={() => this.props.navigation.navigate('App')} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoginScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}